// Generated by gencpp from file graspit_interface/ComputeEnergyRequest.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYREQUEST_H
#define GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graspit_interface
{
template <class ContainerAllocator>
struct ComputeEnergyRequest_
{
  typedef ComputeEnergyRequest_<ContainerAllocator> Type;

  ComputeEnergyRequest_()
    : handId(0)
    , graspableBodyId(0)
    , energyType()  {
    }
  ComputeEnergyRequest_(const ContainerAllocator& _alloc)
    : handId(0)
    , graspableBodyId(0)
    , energyType(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _handId_type;
  _handId_type handId;

   typedef uint32_t _graspableBodyId_type;
  _graspableBodyId_type graspableBodyId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _energyType_type;
  _energyType_type energyType;





  typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ComputeEnergyRequest_

typedef ::graspit_interface::ComputeEnergyRequest_<std::allocator<void> > ComputeEnergyRequest;

typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyRequest > ComputeEnergyRequestPtr;
typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyRequest const> ComputeEnergyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator1> & lhs, const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.handId == rhs.handId &&
    lhs.graspableBodyId == rhs.graspableBodyId &&
    lhs.energyType == rhs.energyType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator1> & lhs, const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb46c20ab640f48b80f1b964f23ef424";
  }

  static const char* value(const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb46c20ab640f48bULL;
  static const uint64_t static_value2 = 0x80f1b964f23ef424ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/ComputeEnergyRequest";
  }

  static const char* value(const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 handId\n"
"uint32 graspableBodyId\n"
"string energyType\n"
"\n"
;
  }

  static const char* value(const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handId);
      stream.next(m.graspableBodyId);
      stream.next(m.energyType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComputeEnergyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::ComputeEnergyRequest_<ContainerAllocator>& v)
  {
    s << indent << "handId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.handId);
    s << indent << "graspableBodyId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.graspableBodyId);
    s << indent << "energyType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.energyType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYREQUEST_H
