// Generated by gencpp from file graspit_interface/SetRobotDesiredDOFRequest.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_SETROBOTDESIREDDOFREQUEST_H
#define GRASPIT_INTERFACE_MESSAGE_SETROBOTDESIREDDOFREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graspit_interface
{
template <class ContainerAllocator>
struct SetRobotDesiredDOFRequest_
{
  typedef SetRobotDesiredDOFRequest_<ContainerAllocator> Type;

  SetRobotDesiredDOFRequest_()
    : id(0)
    , dofs()
    , dof_velocities()  {
    }
  SetRobotDesiredDOFRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , dofs(_alloc)
    , dof_velocities(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dofs_type;
  _dofs_type dofs;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dof_velocities_type;
  _dof_velocities_type dof_velocities;





  typedef boost::shared_ptr< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRobotDesiredDOFRequest_

typedef ::graspit_interface::SetRobotDesiredDOFRequest_<std::allocator<void> > SetRobotDesiredDOFRequest;

typedef boost::shared_ptr< ::graspit_interface::SetRobotDesiredDOFRequest > SetRobotDesiredDOFRequestPtr;
typedef boost::shared_ptr< ::graspit_interface::SetRobotDesiredDOFRequest const> SetRobotDesiredDOFRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator1> & lhs, const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.dofs == rhs.dofs &&
    lhs.dof_velocities == rhs.dof_velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator1> & lhs, const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69456a29060bcb953b1cabeb2c68b83a";
  }

  static const char* value(const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69456a29060bcb95ULL;
  static const uint64_t static_value2 = 0x3b1cabeb2c68b83aULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/SetRobotDesiredDOFRequest";
  }

  static const char* value(const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"float64[] dofs\n"
"float64[] dof_velocities\n"
;
  }

  static const char* value(const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.dofs);
      stream.next(m.dof_velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRobotDesiredDOFRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::SetRobotDesiredDOFRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "dofs[]" << std::endl;
    for (size_t i = 0; i < v.dofs.size(); ++i)
    {
      s << indent << "  dofs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dofs[i]);
    }
    s << indent << "dof_velocities[]" << std::endl;
    for (size_t i = 0; i < v.dof_velocities.size(); ++i)
    {
      s << indent << "  dof_velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dof_velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_SETROBOTDESIREDDOFREQUEST_H
