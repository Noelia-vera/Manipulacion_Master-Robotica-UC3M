// Generated by gencpp from file graspit_interface/GetGraspableBodyResponse.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_GETGRASPABLEBODYRESPONSE_H
#define GRASPIT_INTERFACE_MESSAGE_GETGRASPABLEBODYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graspit_interface/GraspableBody.h>

namespace graspit_interface
{
template <class ContainerAllocator>
struct GetGraspableBodyResponse_
{
  typedef GetGraspableBodyResponse_<ContainerAllocator> Type;

  GetGraspableBodyResponse_()
    : graspable_body()
    , result(0)  {
    }
  GetGraspableBodyResponse_(const ContainerAllocator& _alloc)
    : graspable_body(_alloc)
    , result(0)  {
  (void)_alloc;
    }



   typedef  ::graspit_interface::GraspableBody_<ContainerAllocator>  _graspable_body_type;
  _graspable_body_type graspable_body;

   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESULT_SUCCESS)
  #undef RESULT_SUCCESS
#endif
#if defined(_WIN32) && defined(RESULT_INVALID_ID)
  #undef RESULT_INVALID_ID
#endif

  enum {
    RESULT_SUCCESS = 0u,
    RESULT_INVALID_ID = 1u,
  };


  typedef boost::shared_ptr< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGraspableBodyResponse_

typedef ::graspit_interface::GetGraspableBodyResponse_<std::allocator<void> > GetGraspableBodyResponse;

typedef boost::shared_ptr< ::graspit_interface::GetGraspableBodyResponse > GetGraspableBodyResponsePtr;
typedef boost::shared_ptr< ::graspit_interface::GetGraspableBodyResponse const> GetGraspableBodyResponseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator1> & lhs, const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator2> & rhs)
{
  return lhs.graspable_body == rhs.graspable_body &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator1> & lhs, const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df7a656a438dfdf3e472b3d7f233108f";
  }

  static const char* value(const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf7a656a438dfdf3ULL;
  static const uint64_t static_value2 = 0xe472b3d7f233108fULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/GetGraspableBodyResponse";
  }

  static const char* value(const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GraspableBody graspable_body\n"
"\n"
"uint8 RESULT_SUCCESS    = 0\n"
"uint8 RESULT_INVALID_ID = 1\n"
" \n"
"uint8 result\n"
"\n"
"\n"
"================================================================================\n"
"MSG: graspit_interface/GraspableBody\n"
"std_msgs/Header header\n"
"\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graspable_body);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGraspableBodyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::GetGraspableBodyResponse_<ContainerAllocator>& v)
  {
    s << indent << "graspable_body: ";
    s << std::endl;
    Printer< ::graspit_interface::GraspableBody_<ContainerAllocator> >::stream(s, indent + "  ", v.graspable_body);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_GETGRASPABLEBODYRESPONSE_H
