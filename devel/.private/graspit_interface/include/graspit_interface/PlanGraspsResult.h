// Generated by gencpp from file graspit_interface/PlanGraspsResult.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H
#define GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graspit_interface/Grasp.h>

namespace graspit_interface
{
template <class ContainerAllocator>
struct PlanGraspsResult_
{
  typedef PlanGraspsResult_<ContainerAllocator> Type;

  PlanGraspsResult_()
    : grasps()
    , energies()
    , search_energy()  {
    }
  PlanGraspsResult_(const ContainerAllocator& _alloc)
    : grasps(_alloc)
    , energies(_alloc)
    , search_energy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::graspit_interface::Grasp_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graspit_interface::Grasp_<ContainerAllocator> >> _grasps_type;
  _grasps_type grasps;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _energies_type;
  _energies_type energies;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _search_energy_type;
  _search_energy_type search_energy;





  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const> ConstPtr;

}; // struct PlanGraspsResult_

typedef ::graspit_interface::PlanGraspsResult_<std::allocator<void> > PlanGraspsResult;

typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult > PlanGraspsResultPtr;
typedef boost::shared_ptr< ::graspit_interface::PlanGraspsResult const> PlanGraspsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator1> & lhs, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator2> & rhs)
{
  return lhs.grasps == rhs.grasps &&
    lhs.energies == rhs.energies &&
    lhs.search_energy == rhs.search_energy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator1> & lhs, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a1077cfe47bddbdc065b3d4b564b0a1";
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a1077cfe47bddbdULL;
  static const uint64_t static_value2 = 0xc065b3d4b564b0a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/PlanGraspsResult";
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"Grasp[] grasps\n"
"float64[] energies\n"
"string search_energy\n"
"\n"
"================================================================================\n"
"MSG: graspit_interface/Grasp\n"
"# id for the body the grasp was planned on.\n"
"int32 graspable_body_id\n"
"\n"
"# pose of the hand with respect to the object \n"
"# the grasp was planned on\n"
"geometry_msgs/Pose pose\n"
"\n"
"float64[] dofs\n"
"\n"
"float64 epsilon_quality\n"
"float64 volume_quality\n"
"\n"
"\n"
"# The approach direction to take before picking an object\n"
"geometry_msgs/Vector3Stamped approach_direction\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3Stamped\n"
"# This represents a Vector3 with reference coordinate frame and timestamp\n"
"Header header\n"
"Vector3 vector\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasps);
      stream.next(m.energies);
      stream.next(m.search_energy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanGraspsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::PlanGraspsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::PlanGraspsResult_<ContainerAllocator>& v)
  {
    s << indent << "grasps[]" << std::endl;
    for (size_t i = 0; i < v.grasps.size(); ++i)
    {
      s << indent << "  grasps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::graspit_interface::Grasp_<ContainerAllocator> >::stream(s, indent + "    ", v.grasps[i]);
    }
    s << indent << "energies[]" << std::endl;
    for (size_t i = 0; i < v.energies.size(); ++i)
    {
      s << indent << "  energies[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.energies[i]);
    }
    s << indent << "search_energy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.search_energy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_PLANGRASPSRESULT_H
