// Generated by gencpp from file graspit_interface/Contact.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_CONTACT_H
#define GRASPIT_INTERFACE_MESSAGE_CONTACT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace graspit_interface
{
template <class ContainerAllocator>
struct Contact_
{
  typedef Contact_<ContainerAllocator> Type;

  Contact_()
    : body1()
    , body2()
    , ps()
    , cof(0.0)  {
    }
  Contact_(const ContainerAllocator& _alloc)
    : body1(_alloc)
    , body2(_alloc)
    , ps(_alloc)
    , cof(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _body1_type;
  _body1_type body1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _body2_type;
  _body2_type body2;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _ps_type;
  _ps_type ps;

   typedef double _cof_type;
  _cof_type cof;





  typedef boost::shared_ptr< ::graspit_interface::Contact_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::Contact_<ContainerAllocator> const> ConstPtr;

}; // struct Contact_

typedef ::graspit_interface::Contact_<std::allocator<void> > Contact;

typedef boost::shared_ptr< ::graspit_interface::Contact > ContactPtr;
typedef boost::shared_ptr< ::graspit_interface::Contact const> ContactConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::Contact_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::Contact_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::Contact_<ContainerAllocator1> & lhs, const ::graspit_interface::Contact_<ContainerAllocator2> & rhs)
{
  return lhs.body1 == rhs.body1 &&
    lhs.body2 == rhs.body2 &&
    lhs.ps == rhs.ps &&
    lhs.cof == rhs.cof;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::Contact_<ContainerAllocator1> & lhs, const ::graspit_interface::Contact_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::Contact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::Contact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::Contact_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::Contact_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acebe41357a08b9e018a7979651ec443";
  }

  static const char* value(const ::graspit_interface::Contact_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacebe41357a08b9eULL;
  static const uint64_t static_value2 = 0x018a7979651ec443ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/Contact";
  }

  static const char* value(const ::graspit_interface::Contact_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string body1\n"
"string body2\n"
"\n"
"geometry_msgs/PoseStamped ps # in the graspit world frame\n"
"\n"
"float64 cof # coefficient of friction.\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::graspit_interface::Contact_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::Contact_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body1);
      stream.next(m.body2);
      stream.next(m.ps);
      stream.next(m.cof);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contact_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::Contact_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::Contact_<ContainerAllocator>& v)
  {
    s << indent << "body1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.body1);
    s << indent << "body2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.body2);
    s << indent << "ps: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.ps);
    s << indent << "cof: ";
    Printer<double>::stream(s, indent + "  ", v.cof);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_CONTACT_H
