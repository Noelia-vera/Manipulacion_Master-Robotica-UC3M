// Generated by gencpp from file graspit_interface/ComputeEnergyResponse.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYRESPONSE_H
#define GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graspit_interface
{
template <class ContainerAllocator>
struct ComputeEnergyResponse_
{
  typedef ComputeEnergyResponse_<ContainerAllocator> Type;

  ComputeEnergyResponse_()
    : result(0)
    , energy(0.0)
    , isLegal(false)  {
    }
  ComputeEnergyResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , energy(0.0)
    , isLegal(false)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef double _energy_type;
  _energy_type energy;

   typedef uint8_t _isLegal_type;
  _isLegal_type isLegal;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESULT_SUCCESS)
  #undef RESULT_SUCCESS
#endif
#if defined(_WIN32) && defined(RESULT_INVALID_HAND_ID)
  #undef RESULT_INVALID_HAND_ID
#endif
#if defined(_WIN32) && defined(RESULT_INVALID_BODY_ID)
  #undef RESULT_INVALID_BODY_ID
#endif
#if defined(_WIN32) && defined(RESULT_INVALID_ENERGY_TYPE)
  #undef RESULT_INVALID_ENERGY_TYPE
#endif

  enum {
    RESULT_SUCCESS = 0u,
    RESULT_INVALID_HAND_ID = 1u,
    RESULT_INVALID_BODY_ID = 2u,
    RESULT_INVALID_ENERGY_TYPE = 3u,
  };


  typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ComputeEnergyResponse_

typedef ::graspit_interface::ComputeEnergyResponse_<std::allocator<void> > ComputeEnergyResponse;

typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyResponse > ComputeEnergyResponsePtr;
typedef boost::shared_ptr< ::graspit_interface::ComputeEnergyResponse const> ComputeEnergyResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator1> & lhs, const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.energy == rhs.energy &&
    lhs.isLegal == rhs.isLegal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator1> & lhs, const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graspit_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c46ac3241ac31892d8f1979f6ace57b1";
  }

  static const char* value(const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc46ac3241ac31892ULL;
  static const uint64_t static_value2 = 0xd8f1979f6ace57b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/ComputeEnergyResponse";
  }

  static const char* value(const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RESULT_SUCCESS    = 0\n"
"uint8 RESULT_INVALID_HAND_ID = 1\n"
"uint8 RESULT_INVALID_BODY_ID  = 2\n"
"uint8 RESULT_INVALID_ENERGY_TYPE = 3\n"
"\n"
"uint8 result\n"
"\n"
"float64 energy\n"
"bool isLegal\n"
"\n"
;
  }

  static const char* value(const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.energy);
      stream.next(m.isLegal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComputeEnergyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::ComputeEnergyResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "energy: ";
    Printer<double>::stream(s, indent + "  ", v.energy);
    s << indent << "isLegal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isLegal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_COMPUTEENERGYRESPONSE_H
